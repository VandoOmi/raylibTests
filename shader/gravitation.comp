#version 430
        struct Object {
            vec3 position;
            vec3 velocity;
            float mass;
        };

        layout(std430, binding = 0) buffer Objects {
            Object objects[];
        };
        
        uniform float dt;
        uniform float G;
        uniform int numObjects;
        layout(local_size_x = 256) in;
        void main() {
            uint i = gl_GlobalInvocationID.x;
            if (i >= numObjects) return;
            vec3 force = vec3(0.0);
            for (int j = 0; j < numObjects; j++) {
                if (i == j) continue;
                vec3 dir = objects[j].position - objects[i].position;
                float distSqr = max(dot(dir, dir), 0.0001);
                float f = G * objects[i].mass * objects[j].mass / distSqr;
                force += normalize(dir) * f;
            }
            vec3 acceleration = force / objects[i].mass;
            objects[i].velocity += acceleration * dt;
            objects[i].position += objects[i].velocity * dt;
        }